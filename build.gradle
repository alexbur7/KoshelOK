// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.18.0"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'io.gitlab.arturbosch.detekt'

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = true // activate all available (even unstable) rules.

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
    }
}

task installGitHooks(type: Exec) {
    commandLine 'git', 'config', 'core.hooksPath', '..githooks'
}

def detektTask = tasks.named("detekt") {
    include("**/*.kt")
}

// Open HTML report if detekt fails
def openHtmlReportTask = tasks.register("openDetektHtmlReportInBrowser") {
    onlyIf { !teamcityBuild && detektTask.get().state.failure != null }
    doLast {
        exec {
            commandLine getOpenCommand(detektTask.get().htmlReportFile.orNull)
        }
    }
}

detektTask.configure {
    dependsOn(":detektrules:assemble")
    finalizedBy openHtmlReportTask
}


static def getOpenCommand(Object file) {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    if (currentOs.macOsX) {
        return ['open', file]
    } else if (currentOs.linux) {
        return ['xdg-open', file]
    } else if (currentOs.windows) {
        return ['cmd', '/c', 'start', file]
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
